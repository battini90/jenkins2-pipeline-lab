#!groovy

/*
 * Closure used to switch out the current running container with the newer version.
 * This is a very basic workflow that assumes that the names of the Docker containers
 * are static so we can just stop the pre-existing container and replace it with a
 * new container with the same name. This does mean we do not support fancy stuff
 * like scalling the application. For this we would need a more advanced script.
 */
def switchContainer = { String serverName, List<String> credentials, String containerName, String dockerImageToUse, String appPort, String serverPort ->
  sshagent(credentials: credentials) {
    sh "ssh -o StrictHostKeyChecking=no -l ubuntu ${serverName} docker pull ${dockerImageToUse}"

    sh "ssh -o StrictHostKeyChecking=no -l ubuntu ${serverName} docker stop ${containerName} || true"
    sh "ssh -o StrictHostKeyChecking=no -l ubuntu ${serverName} docker rm ${containerName} || true"
    sh "ssh -o StrictHostKeyChecking=no -l ubuntu ${serverName} docker run -d --name ${containerName} -p ${serverPort}:${appPort} ${dockerImageToUse}"
  }
}

/*
 * Closure to check if an endpoint is up and running.
 * Only does a very basic test by using curl on the endpoint.
 */
def checkEndpoint = { String url ->
  timeout(time: 90, unit: 'SECONDS') {
    sh "until \$(curl --silent --head --fail ${url} > /dev/null); do printf \'.\'; sleep 1; done; curl ${url} | grep \'ng-app=\"characterViewer\"\'"
  }
}

/*
 * We will use the git commit id as a unique identifier for our current build.
 */
String gitCommitId
def jenkinsServerName = '192.168.42.10'
def devServerName = '192.168.42.11'
def prodServerName = '192.168.42.12'

stage("[COMMIT] checkout")
node {
  git branch: 'master', poll: true, url: 'https://github.com/Endron/dnd5-char-viewer.git'

  /*
   * As the current version of the plugin does not grant us direct access to
   * output of the shell commands we have to pipe the output into a file and
   * then read the file.
   */
  sh 'git rev-parse HEAD > git.id'
  gitCommitId = readFile('git.id')
}

def dockerRegistryPort = '5000'
def dockerImage = "${jenkinsServerName}:${dockerRegistryPort}/dndviewer:${gitCommitId.substring(0, 5)}"

stage("[COMMIT] Build+UnitTest")
node {
  sh "./gradlew clean build"
  junit '**/build/test-results/*/*.xml'

  sh "docker build . --tag ${dockerImage}"
  sh "docker push ${dockerImage}"
}

stage("[DEVELOPMENT] Deployment")
node {
  def credentials = ['jenkins-ci']
  def appPort = '8080'

  def containers = [
      [name: 'dndViewer01', serverPort: '9081'],
      [name: 'dndViewer02', serverPort: '9082'],
      [name: 'dndViewer03', serverPort: '9083']
  ]
  for (def container : containers) {
    switchContainer(devServerName, credentials, container.name, dockerImage, appPort, container.serverPort)
  }
}

stage("[DEVELOPMENT] SmokeTest")
node {
  def endpoints = [
      "http://${devServerName}:9081",
      "http://${devServerName}:9082",
      "http://${devServerName}:9083"
  ]
  for (def endpoint : endpoints) {
    checkEndpoint(endpoint)
  }
}

stage("[DEVELOPMENT] Manual UI Test")
input "Continue with production deployment?"

stage("[PRODUCTION] Deployment")
node {
  def credentials = ['jenkins-ci']
  def appPort = '8080'

  def containers = [
      [name: 'dndViewer01', serverPort: '9081'],
      [name: 'dndViewer02', serverPort: '9082'],
      [name: 'dndViewer03', serverPort: '9083']
  ]
  for (def container : containers) {
    switchContainer(prodServerName, credentials, container.name, dockerImage, appPort, container.serverPort)
  }
}

stage("[PRODUCTION] SmokeTest")
node {
  def endpoints = [
      "http://${prodServerName}:9081",
      "http://${prodServerName}:9082",
      "http://${prodServerName}:9083"
  ]
  for (def endpoint : endpoints) {
    checkEndpoint(endpoint)
  }
}
